import React, { useState } from 'react';
import { Modal, Button, Input } from './index';
import { BookOpen, Link, MessageSquare, Settings, Download, CheckCircle, Key, Download as DownloadIcon, ChevronDown, ChevronRight } from 'lucide-react';
import { apiKeySetupService } from '../services/apiKeySetupService';

interface OnboardingStep {
  title: string;
  description: string;
  icon: React.ReactNode;
  content: React.ReactNode;
}

interface Props {
  isOpen: boolean;
  onClose: () => void;
}

export const OnboardingModal: React.FC<Props> = ({ isOpen, onClose }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [apiKey, setApiKey] = useState('');
  const [apiKeyStatus, setApiKeyStatus] = useState<{
    loading: boolean;
    success?: boolean;
    message?: string;
    envContent?: string;
  }>({ loading: false });
  const [showManualSetup, setShowManualSetup] = useState(false);

  // Check if API key is already configured
  const isApiKeyConfigured = apiKeySetupService.isApiKeyConfigured();

  const handleApiKeySetup = async () => {
    setApiKeyStatus({ loading: true });
    const result = await apiKeySetupService.setupApiKey(apiKey);
    setApiKeyStatus({
      loading: false,
      success: result.success,
      message: result.message,
      envContent: result.success ? result.envContent : undefined
    });
  };

  const steps: OnboardingStep[] = [
    {
      title: "Welcome to Smart Research Tracker",
      description: "Your AI-powered research companion",
      icon: <BookOpen className="w-8 h-8 text-blue-600" />,
      content: (
        <div className="space-y-4">
          <p className="text-gray-600">
            Transform how you research by automatically extracting key insights from web pages 
            and enabling intelligent conversations with your saved content.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <Link className="w-6 h-6 text-blue-600 mx-auto mb-2" />
              <h4 className="font-medium text-sm">Save Pages</h4>
              <p className="text-xs text-gray-600">Capture web content instantly</p>
            </div>
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <MessageSquare className="w-6 h-6 text-green-600 mx-auto mb-2" />
              <h4 className="font-medium text-sm">AI Chat</h4>
              <p className="text-xs text-gray-600">Ask questions about your research</p>
            </div>
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <Settings className="w-6 h-6 text-purple-600 mx-auto mb-2" />
              <h4 className="font-medium text-sm">Organize</h4>
              <p className="text-xs text-gray-600">Smart categorization & filtering</p>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Install Browser Extension",
      description: "Save pages with one click",
      icon: <Download className="w-8 h-8 text-blue-600" />,
      content: (
        <div className="space-y-4">
          <p className="text-gray-600">
            The browser extension lets you save any webpage directly from your browser 
            with full text extraction and AI-powered summaries.
          </p>
          <div className="bg-gray-50 p-4 rounded-lg">
            <h4 className="font-medium mb-2">Installation Steps:</h4>
            <ol className="text-sm text-gray-600 space-y-2">
              <li className="flex items-start gap-2">
                <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs flex-shrink-0 mt-0.5">1</span>
                <span>Build the extension: <code className="bg-gray-200 px-1 rounded">pnpm run build:extension</code></span>
              </li>
              <li className="flex items-start gap-2">
                <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs flex-shrink-0 mt-0.5">2</span>
                <span>Open Chrome and go to <code className="bg-gray-200 px-1 rounded">chrome://extensions/</code></span>
              </li>
              <li className="flex items-start gap-2">
                <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs flex-shrink-0 mt-0.5">3</span>
                <span>Enable "Developer mode" in the top right</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs flex-shrink-0 mt-0.5">4</span>
                <span>Click "Load unpacked" and select the <code className="bg-gray-200 px-1 rounded">dist-extension/</code> folder</span>
              </li>
            </ol>
          </div>
          <div className="bg-blue-50 p-3 rounded-lg">
            <p className="text-sm text-blue-800">
              ðŸ’¡ <strong>Tip:</strong> Once installed, you'll see the extension icon in your browser toolbar. 
              Click it on any webpage to save it to your research collection.
            </p>
          </div>
        </div>
      )
    },
    {
      title: "Set Up AI Features",
      description: "Enable intelligent summaries and chat",
      icon: <MessageSquare className="w-8 h-8 text-blue-600" />,
      content: (
        <div className="space-y-5">
          {/* Hero Section */}
          <div className="text-center space-y-3">
            <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg shadow-md">
              <MessageSquare className="w-6 h-6 text-white" />
            </div>
            <p className="text-gray-600 text-sm max-w-md mx-auto">
              AI features are optional but highly recommended. They provide instant summaries 
              and enable intelligent conversations with your research.
            </p>
          </div>
          
          {/* Quick Setup Section */}
          <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
            <div className="flex items-center gap-3 mb-4">
              <div className="flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg">
                <Key className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <h4 className="font-semibold text-gray-900">Quick Setup</h4>
                <p className="text-xs text-gray-500">Recommended for most users</p>
              </div>
            </div>
              
              {isApiKeyConfigured ? (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 bg-green-100 rounded-full">
                      <CheckCircle className="w-5 h-5 text-green-600" />
                    </div>
                    <div>
                      <p className="font-medium text-green-900">API key configured!</p>
                      <p className="text-xs text-green-700">AI features are ready to use</p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      OpenAI API Key
                    </label>
                    <div className="flex gap-3">
                      <div className="flex-1 relative">
                        <Input
                          type="password"
                          placeholder="sk-your-api-key-here"
                          value={apiKey}
                          onChange={(e) => setApiKey(e.target.value)}
                          className="pr-10"
                        />
                        <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                          <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
                        </div>
                      </div>
                      <Button
                        onClick={handleApiKeySetup}
                        disabled={!apiKey.trim() || apiKeyStatus.loading}
                        className="px-6"
                      >
                        {apiKeyStatus.loading ? (
                          <div className="flex items-center gap-2">
                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            Validating
                          </div>
                        ) : (
                          'Setup'
                        )}
                      </Button>
                    </div>
                    <p className="text-xs text-gray-500 mt-2 flex items-center gap-1">
                      <span>Get your API key from</span>
                      <a 
                        href="https://platform.openai.com/api-keys" 
                        target="_blank" 
                        rel="noopener noreferrer" 
                        className="text-blue-600 hover:text-blue-700 font-medium transition-colors"
                      >
                        OpenAI Platform
                      </a>
                    </p>
                  </div>

                  {/* Status Messages */}
                  {apiKeyStatus.message && (
                    <div className={`rounded-xl p-4 border ${
                      apiKeyStatus.success 
                        ? 'bg-green-50 border-green-200 text-green-800' 
                        : 'bg-red-50 border-red-200 text-red-800'
                    }`}>
                      <div className="flex items-start gap-3">
                        <div className={`flex items-center justify-center w-6 h-6 rounded-full flex-shrink-0 mt-0.5 ${
                          apiKeyStatus.success ? 'bg-green-100' : 'bg-red-100'
                        }`}>
                          {apiKeyStatus.success ? (
                            <CheckCircle className="w-4 h-4 text-green-600" />
                          ) : (
                            <span className="text-red-600 text-sm font-bold">!</span>
                          )}
                        </div>
                        <p className="text-sm">{apiKeyStatus.message}</p>
                      </div>
                    </div>
                  )}

                  {/* Download .env.local file */}
                  {apiKeyStatus.success && apiKeyStatus.envContent && (
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-4">
                      <div className="flex items-start gap-3 mb-3">
                        <div className="flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg">
                          <DownloadIcon className="w-5 h-5 text-blue-600" />
                        </div>
                        <div>
                          <p className="font-medium text-blue-900">Configuration ready!</p>
                          <p className="text-xs text-blue-700">Download your .env.local file</p>
                        </div>
                      </div>
                      <Button
                        onClick={() => apiKeySetupService.downloadEnvFile(apiKeyStatus.envContent!)}
                        variant="secondary"
                        className="w-full bg-white hover:bg-gray-50 border border-blue-200 text-blue-700"
                      >
                        <DownloadIcon className="w-4 h-4 mr-2" />
                        Download .env.local
                      </Button>
                      <p className="text-xs text-blue-600 mt-2 text-center">
                        Place this file in your project root, then restart the development server
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Manual Setup Section */}
          <div className="bg-gray-50 rounded-xl overflow-hidden">
            <button
              onClick={() => setShowManualSetup(!showManualSetup)}
              className="w-full px-4 py-3 flex items-center justify-between text-left hover:bg-gray-100 transition-colors group"
            >
              <div className="flex items-center gap-3">
                <div className="flex items-center justify-center w-10 h-10 bg-gray-200 rounded-lg group-hover:bg-gray-300 transition-colors">
                  <Settings className="w-5 h-5 text-gray-600" />
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900">Manual Setup</h4>
                  <p className="text-xs text-gray-500">Alternative configuration method</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-xs text-gray-400 font-medium">
                  {showManualSetup ? 'Hide' : 'Show'}
                </span>
                <div className={`transition-transform duration-200 ${
                  showManualSetup ? 'rotate-180' : ''
                }`}>
                  <ChevronDown className="w-4 h-4 text-gray-500" />
                </div>
              </div>
            </button>
            
            {showManualSetup && (
              <div className="px-4 pb-4 space-y-4 border-t border-gray-200">
                <p className="text-sm text-gray-600 pt-4">
                  Follow these steps if you prefer to set up the configuration manually:
                </p>
                
                <div className="space-y-4">
                  {[
                    {
                      step: 1,
                      title: "Get an OpenAI API key",
                      description: "Visit the OpenAI Platform to create or access your API keys",
                      link: "https://platform.openai.com/api-keys",
                      linkText: "OpenAI Platform"
                    },
                    {
                      step: 2,
                      title: "Create a .env.local file",
                      description: "This file should be in the same directory as your package.json",
                      code: ".env.local"
                    },
                    {
                      step: 3,
                      title: "Add your API key",
                      description: "Replace 'sk-your-key-here' with your actual API key",
                      code: "VITE_OPENAI_API_KEY=sk-your-key-here"
                    },
                    {
                      step: 4,
                      title: "Restart the development server",
                      description: "Stop the current server (Ctrl+C) and run pnpm dev again",
                      code: "pnpm dev"
                    }
                  ].map((item) => (
                    <div key={item.step} className="flex gap-3">
                      <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full flex-shrink-0">
                        <span className="text-sm font-semibold text-blue-600">{item.step}</span>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h5 className="font-medium text-gray-900">{item.title}</h5>
                          {item.link && (
                            <a 
                              href={item.link} 
                              target="_blank" 
                              rel="noopener noreferrer" 
                              className="text-blue-600 hover:text-blue-700 font-medium text-sm transition-colors"
                            >
                              {item.linkText}
                            </a>
                          )}
                        </div>
                        <p className="text-sm text-gray-500 mb-2">{item.description}</p>
                        {item.code && (
                          <div className="bg-gray-900 text-green-400 p-3 rounded-lg font-mono text-sm">
                            {item.code}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
                  <h5 className="text-sm font-semibold text-blue-900 mb-3">Complete .env.local Example</h5>
                  <pre className="text-xs text-blue-800 bg-blue-100 p-3 rounded-lg overflow-x-auto font-mono">
{`# Smart Research Tracker Configuration
VITE_OPENAI_API_KEY=sk-your-actual-api-key-here
VITE_OPENAI_MODEL=gpt-4o-mini
VITE_OPENAI_EMBED_MODEL=text-embedding-3-small
VITE_MAX_SUMMARY_LENGTH=500
VITE_ENABLE_ANALYTICS=false`}
                  </pre>
                </div>
              </div>
            )}
          </div>

          {/* Privacy Notice */}
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <div className="flex items-center justify-center w-10 h-10 bg-green-100 rounded-lg">
                <CheckCircle className="w-5 h-5 text-green-600" />
              </div>
              <div>
                <p className="font-medium text-green-900">Privacy First</p>
                <p className="text-xs text-green-700">
                  All your data stays on your device. AI services are only used when you explicitly request summaries or chat.
                </p>
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      title: "Start Researching",
      description: "You're all set!",
      icon: <CheckCircle className="w-8 h-8 text-green-600" />,
      content: (
        <div className="space-y-4">
          <p className="text-gray-600">
            You're ready to start building your research collection! Here's how to get started:
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-medium mb-2 text-blue-900">Quick Start:</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>â€¢ Use the browser extension to save pages</li>
                <li>â€¢ Add labels to organize your research</li>
                <li>â€¢ Click the chat icon to ask questions</li>
                <li>â€¢ Use filters to find specific content</li>
              </ul>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <h4 className="font-medium mb-2 text-purple-900">Pro Tips:</h4>
              <ul className="text-sm text-purple-800 space-y-1">
                <li>â€¢ Press <kbd className="bg-white px-1 rounded text-xs">/</kbd> to search</li>
                <li>â€¢ Press <kbd className="bg-white px-1 rounded text-xs">âŒ˜K</kbd> to add links</li>
                <li>â€¢ Drag & drop to reorder categories</li>
                <li>â€¢ Select multiple links for group chat</li>
              </ul>
            </div>
          </div>
          <div className="bg-gray-50 p-3 rounded-lg">
            <p className="text-sm text-gray-700">
              ðŸŽ¯ <strong>Next:</strong> Try saving your first webpage using the browser extension, 
              or manually add a link using the "Add Link" button.
            </p>
          </div>
        </div>
      )
    }
  ];

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      onClose();
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const currentStepData = steps[currentStep];

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose} 
      title=""
      maxWidthClass="max-w-4xl w-full mx-2 sm:mx-4"
    >
      <div className="space-y-6 max-h-[80vh] overflow-y-auto">
        {/* Header */}
        <div className="text-center space-y-5">
          <div className="flex justify-center">
            <div className="relative">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl blur-lg opacity-30"></div>
              <div className="relative flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl shadow-lg">
                <div className="text-white">
                  {React.cloneElement(currentStepData.icon as React.ReactElement<any>, { 
                    className: 'w-8 h-8' 
                  })}
                </div>
              </div>
            </div>
          </div>
          <div className="space-y-2">
            <h2 className="text-xl font-bold text-gray-900">
              {currentStepData.title}
            </h2>
            <p className="text-sm text-gray-500 max-w-md mx-auto">
              {currentStepData.description}
            </p>
          </div>
        </div>

        {/* Progress indicator */}
        <div className="flex flex-col items-center space-y-2">
          <div className="flex items-center space-x-3">
            {steps.map((_, index) => (
              <div key={index} className="flex items-center">
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold transition-all duration-300 ${
                    index <= currentStep 
                      ? 'bg-blue-600 text-white shadow-md' 
                      : 'bg-gray-200 text-gray-500'
                  }`}
                >
                  {index + 1}
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-12 h-0.5 mx-2 transition-all duration-300 ${
                    index < currentStep ? 'bg-blue-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
          <p className="text-xs text-gray-400">
            Step {currentStep + 1} of {steps.length}
          </p>
        </div>

        {/* Content */}
        <div className="min-h-[300px] max-h-[55vh] overflow-y-auto">
          {currentStepData.content}
        </div>

        {/* Navigation */}
        <div className="flex justify-between pt-3 border-t border-gray-200 sticky bottom-0 bg-white">
          <Button
            variant="secondary"
            onClick={prevStep}
            disabled={currentStep === 0}
            className="px-6 py-2"
          >
            Previous
          </Button>
          <Button
            onClick={nextStep}
            className="px-6 py-2 bg-blue-600 hover:bg-blue-700"
          >
            {currentStep === steps.length - 1 ? 'Get Started' : 'Next'}
          </Button>
        </div>
      </div>
    </Modal>
  );
}; 