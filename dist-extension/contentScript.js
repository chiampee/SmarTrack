console.log("[Smart Research Tracker] content script loaded");const d="SmartResearchDB",k=7,f=["links","summaries"];function D(s){return f.forEach(c=>{if(!s.objectStoreNames.contains(c)){const t=s.version+1;s.close();const r=indexedDB.open(d,t);return r.onupgradeneeded=()=>{const e=r.result.createObjectStore(c,{keyPath:"id"});c==="links"&&e.createIndex("url","url",{unique:!1})},new Promise((o,e)=>{r.onsuccess=()=>o(r.result),r.onerror=()=>e(r.error)})}}),Promise.resolve(s)}function m(){return new Promise((s,c)=>{const t=(r,o)=>{const e=r?indexedDB.open(d,k):indexedDB.open(d);e.onupgradeneeded=()=>{const n=e.result;f.forEach(l=>{if(!n.objectStoreNames.contains(l)){const i=n.createObjectStore(l,{keyPath:"id"});l==="links"&&i.createIndex("url","url",{unique:!1})}})},e.onsuccess=()=>{D(e.result)?.then(s).catch(c)||s(e.result)},e.onerror=()=>{e.error?.name==="VersionError"&&r?t(!1):c(e.error)}};t(!0)})}chrome.runtime.onMessage.addListener((s,c,t)=>{if(s.type==="GET_LABELS")return m().then(r=>{const n=r.transaction("links","readonly").objectStore("links").getAll();n.onsuccess=()=>{const l=n.result||[],i=new Set;l.forEach(a=>{a.labels&&Array.isArray(a.labels)&&a.labels.forEach(u=>i.add(u))}),t?.({labels:Array.from(i)})},n.onerror=()=>{t?.({labels:[]})}}).catch(()=>t?.({labels:[]})),!0;if(s.type==="UPSERT_LINK"){const{link:r,summaries:o=[]}=s;m().then(e=>{const n=e.transaction(["links","summaries"],"readwrite");n.objectStore("links").put(r);const i=n.objectStore("summaries");o.forEach(a=>i.put(a))}).catch(e=>console.warn("[SRT] UPSERT_LINK DB error",e));return}if(s.type==="ADD_LINK"){const r=s.payload;try{m().then(o=>{const e=o.transaction("links","readwrite"),n=e.objectStore("links"),l=r.url.replace(/\/+$/,"").toLowerCase();let i=!1;try{const u=n.index("url").getAll();u.onsuccess=()=>{i=!0,(u.result||[]).some(h=>(h.url||"").replace(/\/+$/,"").toLowerCase()===l)?console.debug("[SRT] Duplicate link ignored by content script",r.url):n.put(r)}}catch{}if(!i){const a=n.getAll();a.onsuccess=()=>{(a.result||[]).some(S=>(S.url||"").replace(/\/+$/,"").toLowerCase()===l)?console.debug("[SRT] Duplicate link ignored (fallback)",r.url):n.put(r)}}e.oncomplete=()=>{console.log("[SRT] Link added to Dexie via content script",r),t?.({ok:!0})},e.onerror=()=>{console.warn("[SRT] Failed to add link to Dexie",e.error),t?.({ok:!1,error:e.error?.message})}}).catch(o=>{console.warn("[SRT] Failed to open Dexie DB",o),t?.({ok:!1,error:o?.message})})}catch(o){console.error("[SRT] ADD_LINK error",o),t?.({ok:!1,error:o.message})}return!0}if(s.type==="ADD_SUMMARY"){const r=s.payload;try{m().then(o=>{const e=o.transaction("summaries","readwrite");e.objectStore("summaries").put(r),e.oncomplete=()=>{console.log("[SRT] Summary added to Dexie via content script",r),t?.({ok:!0})},e.onerror=()=>{console.warn("[SRT] Failed to add summary to Dexie",e.error),t?.({ok:!1,error:e.error?.message})}}).catch(o=>{console.warn("[SRT] Failed to open Dexie DB",o),t?.({ok:!1,error:o?.message})})}catch(o){console.error("[SRT] ADD_SUMMARY error",o),t?.({ok:!1,error:o.message})}return!0}});window.addEventListener("message",s=>{if(!(!s.data||s.data.type!=="SRT_CLEAR_ALL_LINKS")){m().then(c=>{const t=c.transaction(["links","summaries"],"readwrite");t.objectStore("links").clear(),t.objectStore("summaries").clear()}).catch(c=>console.warn("[SRT] clearAll IndexedDB error",c)),chrome?.storage?.local&&chrome.storage.local.remove(["pendingUpserts","links"],()=>{chrome.runtime.lastError&&console.debug("[SRT] clearAll storage error",chrome.runtime.lastError.message)});try{chrome.runtime.sendMessage({type:"CLEAR_ALL_LINKS"})}catch{}}});
