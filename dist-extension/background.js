console.log("[Smart Research Tracker] Enhanced background script loaded");function h(n){try{const e=new URL(String(n||"").trim()),r=(e.hostname||"").replace(/^www\./i,"");let t=decodeURIComponent(e.pathname||"/");return t=t.replace(/\/+$/,""),t==="/"&&(t=""),`${r}${t}`.toLowerCase()}catch{return String(n||"").trim().replace(/#.*/,"").replace(/\?.*/,"").replace(/^https?:\/\//i,"").replace(/^www\./i,"").replace(/\/+$/,"").toLowerCase()}}const d=new Set;self.addEventListener("unhandledrejection",n=>{const e=n.reason&&n.reason.message||"";/Could not establish connection|Receiving end does not exist/i.test(e)&&(n.preventDefault(),console.debug("[SRT] Ignored transient tab connection error:",e))});chrome.runtime.onMessage.addListener((n,e)=>{n?.type==="CS_READY"&&e?.tab?.id&&d.add(e.tab.id)});chrome.tabs.onRemoved.addListener(n=>d.delete(n));chrome.tabs.onUpdated.addListener((n,e)=>{e.status==="loading"&&d.delete(n)});setInterval(()=>{try{i.updateBadge()}catch(n){console.debug("[SRT] Periodic badge update failed:",n)}},3e4);try{chrome.runtime.onMessage.addListener((n,e,r)=>{if(n?.action==="ping"||n?.type==="SRT_PING"){const t=chrome.runtime.getManifest();return r({extensionId:chrome.runtime.id||"smart-research-tracker",source:"smart-research-tracker-extension",status:"ok",message:"Extension is working",version:t?.version||"0.0.0",timestamp:Date.now()}),!0}})}catch{}class m{constructor(){this.pendingQueue=[],this.processingQueue=[],this.maxRetries=3,this.retryDelay=1e3}async processLink(e){try{if(console.log("[SRT] Processing link:",e.url),!e.url)throw new Error("No URL provided");console.log("[SRT] Starting duplicate check...");const r=await this.checkForDuplicates(e.url);if(console.log("[SRT] Duplicate check completed:",r),r.hasDuplicates)return console.log("[SRT] Duplicates detected, returning duplicate response"),{success:!1,isDuplicate:!0,duplicateInfo:r,message:"Duplicate link detected"};console.log("[SRT] No duplicates, proceeding with save...");const t=this.buildLinkObject(e);try{await this.storeNewLinkInChromeStorage(e,t.id)}catch(s){throw console.error("[SRT] Chrome storage failed:",s),new Error("Failed to save to local storage")}try{await this.broadcastToDashboard(t)}catch(s){console.error("[SRT] Dashboard broadcast failed:",s)}try{await this.processPageContent(e,t)}catch(s){console.error("[SRT] Page content processing failed:",s)}try{this.updateBadge()}catch(s){console.error("[SRT] Badge update failed:",s)}return{success:!0,linkId:t.id}}catch(r){return console.error("[SRT] Link processing failed:",r),{success:!1,error:r.message||"Unknown error occurred",details:r.stack}}}async checkForDuplicates(e){try{console.log("[SRT] Checking for duplicates for URL:",e);const r=await new Promise(a=>{chrome.storage.local.get(["links"],o=>{a(o.links||[])})});console.log("[SRT] Total links in storage:",r.length);const t=h(e);console.log("[SRT] Normalized URL:",t);const s=r.filter(a=>{const o=h(a.url),c=o===t;return console.log("[SRT] Comparing:",o,"vs",t,"=",c),c&&console.log("[SRT] Found duplicate:",a.url,"with title:",a.metadata?.title||a.title),c});if(console.log("[SRT] Duplicates found:",s.length),s.length>0){const a={hasDuplicates:!0,count:s.length,duplicates:s.map(o=>({id:o.id,url:o.url,title:o.metadata?.title||o.title||"Untitled",description:o.metadata?.description||o.description||"",labels:o.labels||o.label?[o.label]:["research"],priority:o.priority||"medium",status:o.status||"active",createdAt:o.createdAt||o.savedAt,updatedAt:o.updatedAt||o.savedAt}))};return console.log("[SRT] Duplicate check result:",a),a}return console.log("[SRT] No duplicates found"),{hasDuplicates:!1,count:0,duplicates:[]}}catch(r){return console.error("[SRT] Duplicate check failed:",r),{hasDuplicates:!1,count:0,duplicates:[]}}}async saveLinkWithConfirmation(e,r){try{console.log("[SRT] Saving link with user confirmation:",e.url);const t=this.buildLinkObject(e);try{await this.storeNewLinkInChromeStorage(e,t.id)}catch(s){throw console.error("[SRT] Chrome storage failed:",s),new Error("Failed to save to local storage")}try{await this.broadcastToDashboard(t)}catch(s){console.error("[SRT] Dashboard broadcast failed:",s)}try{await this.processPageContent(e,t)}catch(s){console.error("[SRT] Page content processing failed:",s)}try{this.updateBadge()}catch(s){console.error("[SRT] Badge update failed:",s)}return{success:!0,linkId:t.id}}catch(t){return console.error("[SRT] Link processing failed:",t),{success:!1,error:t.message||"Unknown error occurred",details:t.stack}}}buildLinkObject(e){const r=new Date;return{id:crypto.randomUUID(),url:e.url,metadata:{title:e.title||"",description:e.description||e.metadata?.description||"",image:e.image||"",author:e.author||"",publishedTime:e.publishedTime||"",modifiedTime:e.modifiedTime||"",siteName:e.siteName||"",keywords:e.keywords||"",structuredData:e.structuredData||{}},labels:e.label?[e.label]:["research"],priority:e.priority||"medium",status:"active",createdAt:r.toISOString(),updatedAt:r.toISOString(),boardId:e.boardId||null,source:"extension",tabId:e.tabId,pageText:e.pageText||""}}async storeInChromeStorage(e,r){return new Promise((t,s)=>{chrome.storage.local.get(["links"],a=>{const o=a.links||[],c=h(e.url),u=o.findIndex(l=>h(l.url)===c);if(u===-1)o.push({...e,normalizedUrl:c,savedAt:Date.now(),id:r,processed:!0,updatedAt:new Date().toISOString()});else{const l=o[u]||{};o[u]={...l,...e,normalizedUrl:l.normalizedUrl||c,id:l.id||r,processed:!0,createdAt:l.createdAt||new Date().toISOString(),updatedAt:new Date().toISOString()},console.log("[SRT] Link updated in chrome.storage (upsert):",e.url)}chrome.storage.local.set({links:o},()=>{if(chrome.runtime.lastError)s(chrome.runtime.lastError);else{console.log("[SRT] Links persisted. Total:",o.length);try{chrome.runtime.sendMessage({type:"DATA_UPDATED",timestamp:Date.now()})}catch{}t()}})})})}async storeNewLinkInChromeStorage(e,r){return new Promise((t,s)=>{chrome.storage.local.get(["links"],a=>{const o=a.links||[],c=h(e.url),u={...e,normalizedUrl:c,savedAt:Date.now(),id:r,processed:!0,updatedAt:new Date().toISOString(),isDuplicate:!0,duplicateOf:e.url};o.push(u),chrome.storage.local.set({links:o},()=>{if(chrome.runtime.lastError)s(chrome.runtime.lastError);else{console.log("[SRT] Duplicate link saved as new entry:",e.url);try{chrome.runtime.sendMessage({type:"DATA_UPDATED",timestamp:Date.now()})}catch{}t()}})})})}async broadcastToDashboard(e,r=[]){const t=["http://localhost:5174/*","http://localhost:5173/*","https://localhost:5174/*","https://localhost:5173/*","http://127.0.0.1:5174/*","http://127.0.0.1:5173/*","https://127.0.0.1:5174/*","https://127.0.0.1:5173/*","file://*/*"];try{const a=(await this.queryTabs(t)||[]).filter(c=>d.has(c.id));if(a.length===0){this.queueForLater({type:"UPSERT_LINK",link:e,summaries:r});try{this.updateBadge()}catch{}return}const o=a.map(c=>this.sendMessageToTab(c.id,{type:"UPSERT_LINK",link:e,summaries:r}));await Promise.allSettled(o),console.log("[SRT] Link broadcasted to dashboard")}catch(s){console.error("[SRT] Dashboard broadcast failed:",s),this.queueForLater({type:"UPSERT_LINK",link:e,summaries:r})}}async processPageContent(e,r){try{let t=e.pageText||"";if(!t&&e.tabId){if(!await new Promise(a=>{try{chrome.tabs.get(e.tabId,o=>{if(chrome.runtime.lastError)return a(!1);const c=o?.url||"",u=/^https?:\/\//i.test(c),l=/^(about:|chrome:|edge:|chrome-extension:)/i.test(c);a(!!o?.id&&u&&!l)})}catch{a(!1)}}))return;try{const a=await new Promise(o=>{chrome.scripting.executeScript({target:{tabId:e.tabId},func:async()=>{try{return window.SRTContentScript?.extractPageData?await window.SRTContentScript.extractPageData():{title:document.title||"",description:document.querySelector('meta[name="description"]')?.content||"",text:document.body?.innerText||"",metadata:{}}}catch(c){return console.debug("[SRT] Inline extraction failed:",c),{title:document.title||"",description:"",text:document.body?.innerText||"",metadata:{}}}}},c=>o(c?.[0]?.result||null))});a?.text&&!t&&(t=a.text)}catch(a){console.debug("[SRT] Script execute failed:",a)}}if(t){const s=this.createSummary(r.id,"raw",t);await this.broadcastSummary(s)}try{await this.enrichWithAI(r,t||"")}catch{}}catch(t){console.error("[SRT] Page content processing failed:",t)}}async extractPageText(e){try{return(await chrome.scripting.executeScript({target:{tabId:e},func:async()=>{try{return window.SRTContentScript?.extractPageData?await window.SRTContentScript.extractPageData():{title:document.title||"",description:document.querySelector('meta[name="description"]')?.content||"",text:document.body?.innerText||"",metadata:{author:document.querySelector('meta[name="author"]')?.content||"",publishedTime:document.querySelector('meta[property="article:published_time"]')?.content||"",siteName:document.querySelector('meta[property="og:site_name"]')?.content||""}}}catch(s){return console.error("[SRT] Content script extraction failed:",s),{title:document.title||"",description:document.querySelector('meta[name="description"]')?.content||"",text:document.body?.innerText||"",metadata:{}}}}}))?.[0]?.result?.text||""}catch(r){return console.debug("[SRT] Page text extraction failed:",r),""}}async enrichWithAI(e,r){try{const t=await this.getApiBase(),s=await fetch(`${t}/api/enrich`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({linkId:e.id,url:e.url,text:r.slice(0,1e5)})});if(!s.ok)throw new Error(`Enrich API returned ${s.status}`);const a=await s.json();if(a?.summary){const o=this.createSummary(e.id,"tldr",a.summary,a.embeddings?.[0]);await this.broadcastSummary(o)}}catch(t){console.debug("[SRT] AI enrichment failed:",t)}}createSummary(e,r,t,s=null){return{id:crypto.randomUUID(),linkId:e,kind:r,content:t,embedding:s,createdAt:new Date,updatedAt:new Date}}async broadcastSummary(e){try{const r=["http://localhost:5174/*","http://localhost:5173/*","http://127.0.0.1:5174/*","http://127.0.0.1:5173/*","file://*/*"],s=(await this.queryTabs(r)||[]).filter(o=>d.has(o.id));if(s.length===0){this.queueForLater({type:"ADD_SUMMARY",payload:e});return}const a=s.map(o=>this.sendMessageToTab(o.id,{type:"ADD_SUMMARY",payload:e}));await Promise.allSettled(a),console.log("[SRT] Summary broadcasted:",e.kind)}catch(r){console.error("[SRT] Summary broadcast failed:",r),this.queueForLater({type:"ADD_SUMMARY",payload:e})}}queueForLater(e){this.pendingQueue.push({...e,timestamp:Date.now(),retries:0}),chrome.storage.local.set({pendingUpserts:this.pendingQueue})}async flushPendingQueue(){if(this.pendingQueue.length===0)return;const e=["http://localhost:5174/*","http://localhost:5173/*","http://127.0.0.1:5174/*","http://127.0.0.1:5173/*","file://*/*"];try{const t=(await this.queryTabs(e)||[]).filter(a=>d.has(a.id));if(t.length===0)return;const s=[...this.pendingQueue];this.pendingQueue=[];for(const a of s)try{const o=t.map(c=>this.sendMessageToTab(c.id,a));await Promise.allSettled(o),console.log("[SRT] Pending message processed:",a.type)}catch(o){console.error("[SRT] Failed to process pending message:",o),a.retries++,a.retries<this.maxRetries&&this.pendingQueue.push(a)}chrome.storage.local.set({pendingUpserts:this.pendingQueue});try{this.updateBadge()}catch{}}catch(r){console.error("[SRT] Queue flush failed:",r)}}async queryTabs(e){return new Promise(r=>{chrome.tabs.query({url:e},t=>{r(t||[])})})}async sendMessageToTab(e,r){const t=()=>new Promise(o=>{try{chrome.tabs.sendMessage(e,r,c=>{chrome.runtime.lastError?o({ok:!1,error:chrome.runtime.lastError.message||"send_failed"}):o(c??{ok:!0})})}catch(c){o({ok:!1,error:c?.message||"send_failed"})}});let s=await t();if(typeof s=="object"&&s&&s.ok===!1&&/Receiving end does not exist|Could not establish connection/i.test(s.error||"")){try{await chrome.scripting.executeScript({target:{tabId:e},files:["contentScript.js"]})}catch{}await new Promise(o=>setTimeout(o,150)),s=await t()}return s}async getApiBase(){return new Promise(e=>{chrome.storage.local.get(["apiBase","dashboardUrl"],r=>{const t=r.apiBase||r.dashboardUrl||"";if(t&&/^https?:\/\//i.test(t))return e(t.replace(/\/?$/,""));e("http://localhost:5174")})})}updateBadge(){this.countStuckLinks().then(e=>{const r=e>0?e.toString():"";chrome.action.setBadgeText({text:r});const t=e>0?"#ef4444":"#10b981";chrome.action.setBadgeBackgroundColor({color:t}),console.log(`[SRT] Badge updated: ${e} stuck links`)}).catch(e=>{console.error("[SRT] Badge update failed:",e),chrome.storage.local.get(["links"],r=>{const t=r.links||[];chrome.action.setBadgeText({text:t.length.toString()}),chrome.action.setBadgeBackgroundColor({color:"#10b981"})})})}async countStuckLinks(){try{const e=await new Promise(s=>{chrome.storage.local.get(["links"],a=>{s(a.links||[])})});if(e.length===0)return 0;const r=await this.getReadyDashboardTabs(["http://localhost:5173/*","https://localhost:5173/*","http://localhost:5174/*","https://localhost:5174/*","https://smartresearchtracker.vercel.app/*"]);if(r.length===0)return e.length;let t=new Set(e.map(s=>s.url));for(const s of r)try{const a=await this.getDisplayedLinksFromTab(s.id);a&&a.length>0&&a.forEach(o=>{t.delete(o.url)})}catch(a){console.debug(`[SRT] Could not check tab ${s.id} for displayed links:`,a);continue}return t.size}catch(e){throw console.error("[SRT] Error counting stuck links:",e),e}}async getDisplayedLinksFromTab(e){return new Promise(r=>{let t,s=!1;const a=(o,c)=>{c.tab?.id===e&&o.type==="SRT_DISPLAYED_LINKS_RESPONSE"&&(s=!0,clearTimeout(t),chrome.runtime.onMessage.removeListener(a),r(o.links||[]))};chrome.runtime.onMessage.addListener(a);try{chrome.tabs.sendMessage(e,{type:"SRT_GET_DISPLAYED_LINKS"},o=>{if(o&&o.links){s=!0,clearTimeout(t),chrome.runtime.onMessage.removeListener(a),r(o.links||[]);return}chrome.runtime.lastError&&(console.debug(`[SRT] Could not send message to tab ${e}:`,chrome.runtime.lastError.message),chrome.scripting.executeScript({target:{tabId:e},files:["contentScript.js"]},()=>{setTimeout(()=>{chrome.tabs.sendMessage(e,{type:"SRT_GET_DISPLAYED_LINKS"})},100)}))})}catch(o){console.debug(`[SRT] Error sending message to tab ${e}:`,o)}t=setTimeout(()=>{s||(chrome.runtime.onMessage.removeListener(a),console.debug(`[SRT] Timeout waiting for displayed links response from tab ${e}`),r([]))},2e3)})}async getReadyDashboardTabs(e){return new Promise(r=>{chrome.tabs.query({url:e},t=>{r(t||[])})})}async clearAllData(){try{await new Promise(e=>{chrome.storage.local.remove(["links","pendingUpserts","labels"],e)}),this.pendingQueue=[],chrome.action.setBadgeText({text:"0"}),console.log("[SRT] All data cleared")}catch(e){console.error("[SRT] Clear data failed:",e)}}}const i=new m;chrome.runtime.onMessage.addListener((n,e,r)=>{switch(console.log("[SRT] Background received message:",n.type),n.type){case"CS_READY":try{i.flushPendingQueue()}catch{}return!1;case"GET_LINKS":try{chrome.storage.local.get(["links"],t=>{r?.({links:t.links||[]})})}catch{r?.({links:[]})}return!0;case"INJECT_CONTENT_SCRIPT":try{chrome.tabs.query({active:!0,currentWindow:!0},t=>{const s=t?.[0];if(!s?.id)return r?.({success:!1});chrome.scripting.executeScript({target:{tabId:s.id},files:["contentScript.js"]},()=>{r?.({success:!0})})})}catch{r?.({success:!1})}return!0;case"SAVE_LINK":return console.log("[SRT] Processing SAVE_LINK message..."),i.processLink(n.payload).then(t=>{console.log("[SRT] SAVE_LINK result:",t),r?.(t)}).catch(t=>{console.error("[SRT] SAVE_LINK failed:",t),r?.({success:!1,error:t.message||"Unknown error",details:t.stack})}),!0;case"CLEAR_ALL_LINKS":return console.log("[SRT] Processing CLEAR_ALL_LINKS message..."),i.clearAllData().then(()=>{console.log("[SRT] CLEAR_ALL_LINKS completed"),r?.({success:!0})}).catch(t=>{console.error("[SRT] CLEAR_ALL_LINKS failed:",t),r?.({success:!1,error:t.message||"Unknown error"})}),!0;case"DATA_UPDATED":return console.log("[SRT] Processing DATA_UPDATED message..."),i.updateBadge(),!1;case"REFRESH_BADGE":return console.log("[SRT] Manually refreshing badge..."),i.updateBadge(),r?.({success:!0}),!0;case"SAVE_LINK_CONFIRMED":return console.log("[SRT] Processing SAVE_LINK_CONFIRMED message..."),i.saveLinkWithConfirmation(n.payload,n.duplicateInfo).then(t=>{console.log("[SRT] SAVE_LINK_CONFIRMED result:",t),r?.(t)}).catch(t=>{console.error("[SRT] SAVE_LINK_CONFIRMED failed:",t),r?.({success:!1,error:t.message||"Unknown error",details:t.stack})}),!0;default:return console.warn("[SRT] Unknown message type:",n.type),!1}});chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.removeAll(()=>{chrome.contextMenus.create({id:"openDashboard",title:"📊 Open Smart Research Dashboard",contexts:["action","page","selection"]}),chrome.contextMenus.create({id:"saveToResearch",title:"💾 Save to Smart Research",contexts:["page","link","selection"]}),chrome.contextMenus.create({id:"separator1",type:"separator",contexts:["page","link","selection"]}),chrome.contextMenus.create({id:"quickSave",title:"⚡ Quick Save (Current Page)",contexts:["page"]})}),i.updateBadge(),chrome.storage.local.get(["pendingUpserts"],n=>{n.pendingUpserts&&(i.pendingQueue=n.pendingUpserts)})});chrome.contextMenus.onClicked.addListener((n,e)=>{switch(n.menuItemId){case"openDashboard":g();break;case"saveToResearch":chrome.action.openPopup();break;case"quickSave":p(e);break}});async function g(){try{const e=await new Promise(s=>chrome.storage.sync.get({dashboardUrl:""},s)),r=await new Promise(s=>chrome.storage.local.get({apiBase:"",dashboardUrl:""},s)),t=[e.dashboardUrl,r.dashboardUrl,r.apiBase].filter(Boolean);for(const s of t)try{if(s){await new Promise((a,o)=>{chrome.tabs.create({url:s},c=>{chrome.runtime.lastError?o(chrome.runtime.lastError):a(c)})});return}}catch{}}catch{}const n=["http://localhost:5174/","http://localhost:5173/","http://127.0.0.1:5174/","http://127.0.0.1:5173/"];for(const e of n)try{await new Promise((r,t)=>{chrome.tabs.create({url:e},s=>{chrome.runtime.lastError?t(chrome.runtime.lastError):r(s)})});return}catch{}chrome.notifications.create({type:"basic",iconUrl:"icons/icon.svg",title:"Smart Research Tracker",message:"Could not open dashboard. Make sure the app is running."})}async function p(n){if(!n?.url||n.url.startsWith("chrome://")){chrome.notifications.create({type:"basic",iconUrl:"icons/icon.svg",title:"Smart Research Tracker",message:"Cannot save this page type."});return}try{const r=(await chrome.scripting.executeScript({target:{tabId:n.id},func:()=>({title:document.title||"",description:document.querySelector('meta[name="description"]')?.content||"",text:document.body?.innerText?.slice(0,1e4)||""})}))?.[0]?.result||{},t=await i.processLink({url:n.url,title:r.title,description:r.description,pageText:r.text,tabId:n.id,priority:"medium",label:"quick-save"});if(t.success)chrome.notifications.create({type:"basic",iconUrl:"icons/icon.svg",title:"Smart Research Tracker",message:"Page saved successfully!"});else throw new Error(t.error)}catch(e){console.error("[SRT] Quick save failed:",e),chrome.notifications.create({type:"basic",iconUrl:"icons/icon.svg",title:"Smart Research Tracker",message:"Failed to save page. Please try again."})}}setInterval(()=>{i.flushPendingQueue()},3e4);chrome.runtime.onStartup.addListener(()=>{console.log("[SRT] Extension started"),i.updateBadge()});chrome.tabs.onUpdated.addListener((n,e,r)=>{e.status==="complete"&&(r.url?.startsWith("file:///")||r.url?.includes("localhost:5173")||r.url?.includes("localhost:5174"))&&setTimeout(()=>i.flushPendingQueue(),1e3)});
